@page "/bookings"
@rendermode InteractiveServer

<PageTitle>Bookings</PageTitle>

<h1>Bookings</h1>
<h3>(Suppliers context)</h3>

<button type="button" class="btn btn-primary" @onclick="@(() => AddBooking())">Add Booking</button>

@if (_bookings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Booking Id</th>
                <th>Booking Reference</th>
                <th>Customer</th>
                <th>Supplier</th>
                <th>Shipper</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in _bookings)
            {
                <tr>
                    <td>@booking.BookingId</td>
                    <td>@booking.BookingReference</td>
                    <td>@booking.CustomerName.Name</td>
                    <td>@booking.SupplierName.Name</td>
                    <td>@booking.ShipperName.Name</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="@(() => ToJobAsync(booking))">To Job</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@inject IConfiguration _configuration;
@inject IBookingService _bookingService;
@inject NavigationManager _navigationManager;

@code {
    private IEnumerable<BookingViewModel>? _bookings;

    protected override async Task OnInitializedAsync()
    {
        _bookings = await _bookingService.GetBookingsAsync();
    }

    public void AddBooking()
    {
        _navigationManager.NavigateTo("/booking/edit");
    }

    public async Task ToJobAsync(BookingViewModel bookingViewModel)
    {
        await _bookingService.ToJobAsync(bookingViewModel);
    }
}
